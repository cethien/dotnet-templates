@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using BlazorServerTailwindTemplate.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<div class="flex flex-col">
@if (forecasts == null)
{

<div class='flex items-center self-center'>
    <LoadingSpinner/>
</div>

}
else
{
    <div class="flex flex-col gap-4 p-2 bg-slate-100 dark:bg-slate-800 rounded shadow">
        <table>
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>
                        <div class="flex justify-between items-center gap-4">
                            Summary
                            <button class="p-2 items-center justify-center" @onclick="FetchDataAsync" disabled="@(isLoading)">
                                <i class="@loadClass"></i>
                            </button>
                        </div>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>


    </div>
}
</div>

@code {
    private string? loadClass;
    private WeatherForecast[]? forecasts;
    private bool isLoading = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await FetchDataAsync();
            StateHasChanged();
        }
    }

    private async Task FetchDataAsync(){
        isLoading = true;
        loadClass = "fas fa-spinner animate-spin";
        await Task.Delay(2000);
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
        loadClass = "fas fa-arrow-rotate-right";
        isLoading = false;
    }
}
